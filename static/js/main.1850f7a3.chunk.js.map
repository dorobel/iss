{"version":3,"sources":["components/Header.jsx","containers/App.jsx","serviceWorker.js","index.jsx"],"names":["Header","position","class","id","lng","lat","mapboxgl","accessToken","App","props","generateMap","map","Map","container","mapContainer","style","center","state","zoom","addMarker","document","createElement","className","Marker","el","setLngLat","addTo","fetch","then","response","json","setState","iss_position","longitude","latitude","wrapperFunction","changeHeading","setTimeout","getElementById","innerText","textContent","this","ref","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4OAUeA,EARA,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACf,OACE,4BAAQC,MAAM,oBACZ,wBAAIC,GAAG,SAASD,MAAM,kBAAtB,2BAAgED,EAASG,IAAzE,iBAA4FH,EAASI,OCA3GC,IAASC,YAAc,gG,IA8ERC,E,kDA3EX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAeVC,YAAc,WASV,OARA,EAAKC,IAAM,IAAIL,IAASM,IAAI,CACxBC,UAAW,EAAKC,aAChBC,MAAO,qCACPC,OAAQ,CAAC,EAAKC,MAAMb,IAAK,EAAKa,MAAMZ,KACpCa,KAAM,EAAKD,MAAMC,OAGT,EAAKP,KAxBF,EA6BnBQ,UAAY,SAACR,GAEAS,SAASC,cAAc,OAC7BC,UAAY,SAEf,IAAIhB,IAASiB,OAAO,EAAKC,IACpBC,UAAU,CAAC,EAAKR,MAAMb,IAAK,EAAKa,MAAMZ,MACtCqB,MAAM,EAAKf,MApCD,EAwCnBgB,MAAQ,WACJA,MAAM,2CACDC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAA3B,GACF,OAAO,EAAK8B,SAAS,CAAE3B,IAAKH,EAAS+B,aAAaC,UAAW5B,IAAKJ,EAAS+B,aAAaE,eA9CjF,EAmDnBC,gBAAkB,WACd,EAAKR,QACL,EAAKR,aArDU,EAyDnBiB,cAAgB,WACZC,WAAW,EAAKV,MAAO,KACvBU,WAAW,EAAKD,cAAe,KAC/BhB,SAASkB,eAAe,UAAUC,UAAlC,kCAAyE,EAAKtB,MAAMb,IAApF,yBAAwG,EAAKa,MAAMZ,KACnHe,SAASkB,eAAe,UAAUE,YAAlC,kCAA2E,EAAKvB,MAAMb,IAAtF,yBAA0G,EAAKa,MAAMZ,MA3DrH,EAAKY,MAAQ,CACTb,IAAK,EACLC,IAAK,EACLa,KAAM,GALK,E,gEAUfuB,KAAK/B,cACL+B,KAAKd,QACLc,KAAKL,kB,+BAoDC,IAAD,OACL,OACI,yBAAKd,UAAU,MACX,yBAAKoB,IAAK,SAAAlB,GAAE,OAAI,EAAKV,aAAeU,GAAIF,UAAU,iBAC9C,4BAAQqB,QAASF,KAAKN,gBAAiBb,UAAU,qDAAjD,kBACA,kBAAC,EAAD,CAAQrB,SAAUwC,KAAKxB,a,GAtEzB2B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACL,kBAAC,EAAD,MACE/B,SAASkB,eAAe,SDyHxB,kBAAmBc,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1850f7a3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = ({position}) => {\r\n  return (\r\n    <header class=\"w-100  absolute \">\r\n      <h1 id=\"Header\" class=\"f5  mid-gray  \">ISS Position: Longitude {position.lng}  | Latitude  {position.lat}</h1>\r\n    </header>  \r\n  )\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react';\r\nimport './App.css'\r\nimport mapboxgl from 'mapbox-gl';\r\nimport Header from '../components/Header'\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoiZG9yb2JhbnR1biIsImEiOiJja2MwdnEzc20xNTI3MzBuNHlndDhkdjF6In0.ABVT9PxRdE1QJRm_yCuOgA'\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            lng: 0,\r\n            lat: 0,\r\n            zoom: 1,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.generateMap()\r\n        this.fetch()\r\n        this.changeHeading()\r\n    }\r\n\r\n\r\n    generateMap = () => {\r\n        this.map = new mapboxgl.Map({\r\n            container: this.mapContainer,\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n            center: [this.state.lng, this.state.lat],\r\n            zoom: this.state.zoom,\r\n        })\r\n\r\n        const map = this.map\r\n        return map\r\n\r\n    }\r\n\r\n    addMarker = (map) => {\r\n\r\n        let el = document.createElement('div');\r\n        el.className = 'marker';\r\n\r\n        new mapboxgl.Marker(this.el)\r\n            .setLngLat([this.state.lng, this.state.lat])\r\n            .addTo(this.map)\r\n    }\r\n\r\n\r\n    fetch = () => {\r\n        fetch('http://api.open-notify.org/iss-now.json')\r\n            .then(response => {\r\n                return response.json()\r\n            })\r\n            .then(position => {\r\n                return this.setState({ lng: position.iss_position.longitude, lat: position.iss_position.latitude })\r\n            })\r\n    }\r\n\r\n\r\n    wrapperFunction = () => {\r\n        this.fetch();\r\n        this.addMarker();\r\n    }\r\n\r\n\r\n    changeHeading = () => {\r\n        setTimeout(this.fetch, 2000)\r\n        setTimeout(this.changeHeading, 2000);\r\n        document.getElementById('Header').innerText = `ISS Position: Longitude ${this.state.lng}  | Latitude  ${this.state.lat}`;\r\n        document.getElementById('Header').textContent = `ISS Position: Longitude ${this.state.lng}  | Latitude  ${this.state.lat}`;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"tc\">\r\n                <div ref={el => this.mapContainer = el} className='mapContainer' />\r\n                    <button onClick={this.wrapperFunction} className='button f7 link dim ph3 pv2 mb2 dib white bg-black'>Marker on map!</button>\r\n                    <Header position={this.state}/>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\n\r\nReactDOM.render(\r\n    <App />\r\n    , document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\nserviceWorker.unregister(); "],"sourceRoot":""}