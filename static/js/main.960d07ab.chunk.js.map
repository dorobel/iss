{"version":3,"sources":["containers/App.jsx","serviceWorker.js","index.jsx"],"names":["mapboxgl","accessToken","App","props","generateMap","map","Map","container","mapContainer","style","center","state","lng","lat","zoom","addMarker","document","createElement","className","Marker","el","setLngLat","addTo","fetch","then","response","json","position","setState","iss_position","longitude","latitude","wrapperFunction","changeHeading","getElementById","innerText","textContent","setTimeout","setInterval","this","ref","onClick","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4OAKAA,IAASC,YAAc,gG,IAiFRC,E,kDA9EX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAeVC,YAAc,WASV,OARA,EAAKC,IAAM,IAAIL,IAASM,IAAI,CACxBC,UAAW,EAAKC,aAChBC,MAAO,qCACPC,OAAQ,CAAC,EAAKC,MAAMC,IAAK,EAAKD,MAAME,KACpCC,KAAM,EAAKH,MAAMG,OAGT,EAAKT,KAxBF,EA6BnBU,UAAY,SAACV,GAEAW,SAASC,cAAc,OAC7BC,UAAY,SAEf,IAAIlB,IAASmB,OAAO,EAAKC,IACpBC,UAAU,CAAC,EAAKV,MAAMC,IAAK,EAAKD,MAAME,MACtCS,MAAM,EAAKjB,MApCD,EAwCnBkB,MAAQ,WACJA,MAAM,2CACDC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF,OAAO,EAAKC,SAAS,CAAEhB,IAAKe,EAASE,aAAaC,UAAWjB,IAAKc,EAASE,aAAaE,eA9CjF,EAmDnBC,gBAAkB,WACd,EAAKT,QACL,EAAKR,aArDU,EAyDnBkB,cAAgB,WACZjB,SAASkB,eAAe,gBAAgBC,UAAxC,kCAA+E,EAAKxB,MAAMC,IAA1F,yBAA8G,EAAKD,MAAME,KACzHG,SAASkB,eAAe,gBAAgBE,YAAxC,kCAAiF,EAAKzB,MAAMC,IAA5F,yBAAgH,EAAKD,MAAME,KAC3HwB,WAAW,EAAKd,MAAO,KACvBe,YAAY,EAAKL,cAAe,MA3DhC,EAAKtB,MAAQ,CACTC,IAAK,EACLC,IAAK,EACLC,KAAM,GALK,E,gEAUfyB,KAAKnC,cACLmC,KAAKhB,QACLgB,KAAKN,kB,+BAoDC,IAAD,OACL,OACI,6BACI,yBAAKO,IAAK,SAAApB,GAAE,OAAI,EAAKZ,aAAeY,GAAIF,UAAU,iBAClD,yBAAKA,UAAU,MACX,4BAAQuB,QAASF,KAAKP,gBAAiBd,UAAU,qDAAjD,kBACA,wBAAIwB,GAAG,eAAexB,UAAU,uB,GAvElCyB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACL,kBAAC,EAAD,MACElC,SAASkB,eAAe,SDyHxB,kBAAmBiB,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.960d07ab.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css'\r\nimport mapboxgl from 'mapbox-gl';\r\n\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoiZG9yb2JhbnR1biIsImEiOiJja2MwdnEzc20xNTI3MzBuNHlndDhkdjF6In0.ABVT9PxRdE1QJRm_yCuOgA'\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            lng: 0,\r\n            lat: 0,\r\n            zoom: 1,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.generateMap()\r\n        this.fetch()\r\n        this.changeHeading()\r\n    }\r\n\r\n\r\n    generateMap = () => {\r\n        this.map = new mapboxgl.Map({\r\n            container: this.mapContainer,\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n            center: [this.state.lng, this.state.lat],\r\n            zoom: this.state.zoom,\r\n        })\r\n\r\n        const map = this.map\r\n        return map\r\n\r\n    }\r\n\r\n    addMarker = (map) => {\r\n\r\n        let el = document.createElement('div');\r\n        el.className = 'marker';\r\n\r\n        new mapboxgl.Marker(this.el)\r\n            .setLngLat([this.state.lng, this.state.lat])\r\n            .addTo(this.map)\r\n    }\r\n\r\n\r\n    fetch = () => {\r\n        fetch('http://api.open-notify.org/iss-now.json')\r\n            .then(response => {\r\n                return response.json()\r\n            })\r\n            .then(position => {\r\n                return this.setState({ lng: position.iss_position.longitude, lat: position.iss_position.latitude })\r\n            })\r\n    }\r\n\r\n\r\n    wrapperFunction = () => {\r\n        this.fetch();\r\n        this.addMarker();\r\n    }\r\n\r\n\r\n    changeHeading = () => {\r\n        document.getElementById('sidebarStyle').innerText = `ISS Position: Longitude ${this.state.lng}  | Latitude  ${this.state.lat}`;\r\n        document.getElementById('sidebarStyle').textContent = `ISS Position: Longitude ${this.state.lng}  | Latitude  ${this.state.lat}`;\r\n        setTimeout(this.fetch, 1000)\r\n        setInterval(this.changeHeading, 1000);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div ref={el => this.mapContainer = el} className='mapContainer' />\r\n                <div className='tc'>\r\n                    <button onClick={this.wrapperFunction} className='button f7 link dim ph3 pv2 mb2 dib white bg-black'>Marker on map!</button>\r\n                    <h4 id='sidebarStyle' className='sidebarStyle'>\r\n                    </h4>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n    <App />\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister(); "],"sourceRoot":""}